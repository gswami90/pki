#!/usr/bin/python
# -*- coding: UTF-8 -*-

"""
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#   Description: PKI USER-CERT CLI tests
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   The following pki user commands needs to be tested:
#   pki user-cert
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#   Author: Amol Kahat <akahat@redhat.com>
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#   Copyright (c) 2018 Red Hat, Inc. All rights reserved.
#
#   This copyrighted material is made available to anyone wishing
#   to use, modify, copy, or redistribute it subject to the terms
#   and conditions of the GNU General Public License version 2.
#
#   This program is distributed in the hope that it will be
#   useful, but WITHOUT ANY WARRANTY; without even the implied
#   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#   PURPOSE. See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public
#   License along with this program; if not, write to the Free
#   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301, USA.
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"""

import logging
import os
import random
import shutil
import sys
import re
import tempfile
from lxml import etree

import pytest

from pki.testlib.common.utils import UserOperations

try:
    from pki.testlib.common import constants
except Exception as e:
    if os.path.isfile('/tmp/test_dir/constants.py'):
        sys.path.append('/tmp/test_dir')
        import constants

user_op = UserOperations(nssdb=constants.NSSDB)
log = logging.getLogger()
logging.basicConfig(stream=sys.stdout, level=logging.INFO)
topology = constants.CA_INSTANCE_NAME.split("-")[-2]
cmd = 'ca-cert-request-review'
status = ['pending', 'cancel', 'reject', 'approve']
tenses = {'cancel': 'canceled',
          'pending': 'pending',
          'reject': 'rejected',
          'approve': 'complete'}


@pytest.fixture(scope='function')
def gen_pkcs10_req(ansible_module):
    createdReq = False
    b64_cert_req = None
    temp_dir = tempfile.mkdtemp(suffix='prof_', prefix='_test')
    modified_xml = os.path.join(temp_dir, 'caUserCertModified.xml')
    userid = 'testuser{}'.format(random.randint(111, 999))
    subject = 'UID={},CN={}'.format(userid, userid)
    request_file = '/tmp/{}.pem'.format(userid)
    pkcs10cmd = 'PKCS10Client -d {} -p {} -a rsa -l 2048 -o {} -n {}'.format(
        constants.NSSDB, constants.CA_PASSWORD, request_file, subject)
    pkcs10_out = ansible_module.command(pkcs10cmd)
    for res in pkcs10_out.values():
        if res['rc'] == 0:
            createdReq = True
            ansible_module.fetch(src='/tmp/{}.pem'.format(userid), dest=temp_dir, flat=True)
            if os.path.isfile(temp_dir + '/{}.pem'.format(userid)):
                b64_cert_req = open(temp_dir + '/{}.pem'.format(userid)).read()
            # yield '/tmp/{}.pem'.format(userid)
    if createdReq:
        profile_show = ansible_module.pki(cli='ca-cert-request-profile-show',
                                          nssdb=constants.NSSDB,
                                          dbpassword=constants.CLIENT_DATABASE_PASSWORD,
                                          port=constants.CA_HTTP_PORT,
                                          protocol='http',
                                          extra_args='caUserCert --output /tmp/caUserCert.xml')

        for result in profile_show.values():
            if result['rc'] == 0:
                assert 'Enrollment Template for Profile "caUserCert"' in result['stdout']
                assert 'Saved enrollment template for caUserCert to /tmp/caUserCert.xml' in result[
                    'stdout']
    ansible_module.fetch(src='/tmp/caUserCert.xml', dest=temp_dir, flat=True)
    if os.path.isfile(os.path.join(temp_dir, 'caUserCert.xml')):
        xml_file = open(os.path.join(temp_dir, 'caUserCert.xml')).read()
        xml_root = etree.XML(xml_file)
        cert_request = xml_root.xpath("//*[@name='cert_request']/Value")
        if not cert_request:
            cert_request.text = b64_cert_req
            xml_file = etree.tostring(xml_root, pretty_print=True).decode()
            with open(modified_xml, 'w+') as xml:
                xml.write(xml_file)
            ansible_module.copy(src=modified_xml, dest='/tmp/caUserCert.xml', flat=True)

            yield {'userid': userid, 'subejct': subject, 'req': request_file}
    ansible_module.command('rm -rf /tmp/{}.pem /tmp/caUserCert.xml'.format(userid))
    shutil.rmtree(temp_dir)


def get_log_messages(ansible_module):
    """
    This method will check that logs are generated by the system.
    If logs are generated then it will return true.
    """
    if topology == '01':
        instance = "pki-tomcat"
    else:
        instance = constants.CA_INSTANCE_NAME
    output = ansible_module.command('tail /var/log/pki/{}/ca/signedAudit/'
                                    'ca_audit'.format(instance))

    for res in output.values():
        if res['rc'] == 0:
            return res['stdout']


@pytest.mark.parametrize('msg', ['--help', ''])
def test_pki_ca_cert_request_review_help(ansible_module, msg):
    """
    :Title: Test pki ca-cert-request-review --help command.
    :Description: Test pki ca-cert-request-review command with '' and --help command
    :Requirement:
    :CaseComponent: \-
    :Setup: Use the subsystems setup in ansible to run subsystem commands
    :Steps:
        1. Run pki ca-cert-request-review --help
        2. Run pki ca-cert-request-review ''
    :Expectedresults:
        1. It should show the help message.
        2. It should throw an error message. "Error: Missing Certificate Request ID."
    """

    help_msg = ansible_module.command('pki -p {} -P http {} {}'.format(constants.CA_HTTP_PORT,
                                                                       cmd, msg))

    for result in help_msg.values():
        log.info("Running : {}".format(result['cmd']))
        if result['rc'] == 0:
            assert 'usage: {} <Request ID> [OPTIONS...]'.format(cmd) in result['stdout']
            assert '--action <action>          DEPRECATED: Action: null' in \
                   result['stdout']
            assert '--debug                    Run in debug mode' in result['stdout']
            assert '--file <filename>          DEPRECATED: File to store the retrieved' in \
                   result['stdout']
            assert 'Action will be prompted for to run against' in result['stdout']
            assert 'request read in from file.' in result['stdout']
            assert '--help                     Show help message.' in result['stdout']
            assert '--output-file <filename>   Ouput file to store the certificate' in \
                   result['stdout']
            assert 'request.' in result['stdout']
            assert '-v,--verbose                  Run in verbose mode.' in result['stdout']
        elif result['rc'] >= 1:
            assert 'ERROR: Missing certificate request ID' in result['stderr']


@pytest.mark.gating_tier1
@pytest.mark.rsa_pss
@pytest.mark.parametrize('action', ['approve', 'reject', 'cancel'])
def test_pki_ca_cert_request_review_with_diff_actions(ansible_module, action):
    """
    :Title: Test create and process certificate req with approve, reject and cancel action.
    :Description: Test create and process certificate req with approve, reject and cancel action.
    :Requirement:
    :CaseComponent: \-
    :Setup: Use the subsystems setup in ansible to run subsystem commands
    :Steps:
        1. Create certificate request using 'client-cert-request'
        2. Get the request id
        3. Approve the certificate request.
        4. 1, 2, Reject the certificate request.
        5. 1, 2, Cancel the certificate request.
    :Expectedresults:
        1. It should get approved and certificate id is is displayed
        2. It should get rejected.
        3. Certificate request should get cancelled.
    """
    no = random.randint(1111, 999999)
    subject = 'UID=testuser{},CN=testuser{}'.format(no, no)
    created_request = False
    request_id = user_op.create_certificate_request(ansible_module, subject=subject)

    if created_request:
        review_req = ansible_module.pki(cli=cmd,
                                        nssdb=constants.NSSDB,
                                        dbpassword=constants.CLIENT_DATABASE_PASSWORD,
                                        certnick="'{}'".format(constants.CA_ADMIN_NICK),
                                        port=constants.CA_HTTP_PORT,
                                        protocol='http',
                                        extra_args='{} --action {}'.format(request_id, action))

        for result in review_req.values():
            log.info("Running : {}".format(result['cmd']))
            if result['rc'] == 0:
                assert '{} certificate request'.format(tenses[action]) in result['stdout']
                assert 'Request ID:' in result['stdout']
                assert 'Type:' in result['stdout']
                assert 'Request Status:' in result['stdout']
                assert 'Request Status: {}'.format(tenses[status]) not in result['stdout']
                assert 'Operation Result: ' in result['stdout']
            else:
                log.info("Filed to run {}".format(result['cmd']))
                pytest.fail("")


@pytest.mark.parametrize('action', ['approve', 'reject', 'cancel', 'update', 'validate', 'assign',
                                    'unassign'])
def test_pki_cert_request_review_update_req(ansible_module, action):
    """
    :Title: Test pki ca-cert-request-review, Update the request using agent user.
    :Description: Test pki ca-cert-request-review, Update the certificate request using agent user.
    :Requirement:
    :CaseComponent: \-
    :Setup: Use the subsystems setup in ansible to run subsystem commands
    :Steps:
        1. Create XML certificate request.
        2. Submit te certificate request.
        3. Modified the certificate request.
        4. Approve the certificate request
    :Expectedresults:
        1. Certificate request should get updated.
        2. After approval certificate should get generated.
    """

    gramer_dict = {'approve': 'approved', 'cancel': 'canceled', 'reject': 'rejected',
                   'update': 'updated', 'validate': 'validated', 'assign': 'assigned',
                   'unassign': 'unassigned'}
    no = random.randint(111, 9999)
    user = 'testuser{}'.format(no)
    fullName = 'Test User {}'.format(no)
    subject = 'UID={},CN={}'.format(user, fullName)
    request_id = user_op.create_certificate_request(ansible_module, subject=subject)
    req_xml = '/tmp/req_{}.xml'.format(request_id)
    req_update = 'pki -d {} -c {} -n "{}" -p {} -P http {} {} ' \
                 '--file {}'.format(constants.NSSDB, constants.CLIENT_DATABASE_PASSWORD,
                                    constants.CA_ADMIN_NICK, constants.CA_HTTP_PORT, cmd,
                                    request_id, req_xml)
    log.info("Running: {}".format(req_update))
    update_prof = ansible_module.expect(
        command=req_update,
        responses={"Action \(approve/reject/cancel/update/validate/assign/unassign\): ": 'update'})

    for result in update_prof.values():
        if result['rc'] == 0:
            assert 'Retrieved certificate request {}'.format(request_id) in result['stdout']
            assert 'Request ID: {}'.format(request_id) in result['stdout']
            assert 'Type: enrollment' in result['stdout']
            assert 'Status: pending' in result['stdout']
            assert 'Action (approve/reject/cancel/update/validate/assign/unassign):' in result[
                'stdout']
            assert 'Updated certificate request {}'.format(request_id) in result['stdout']
            assert 'Operation Result: success' in result['stdout']
        else:
            log.error("Failed to retrieve the certificate request in file.")
            pytest.fail()

    # TODO process xml file with different time

    approve_req = ansible_module.expect(
        command=req_update,
        responses={"Action \(approve/reject/cancel/update/validate/assign/unassign\): ": action})
    for res in approve_req.values():
        if res['rc'] == 0:
            assert 'Retrieved certificate request {}'.format(request_id) in res['stdout']
            assert 'Request ID: {}'.format(request_id) in res['stdout']
            assert 'Type: enrollment' in res['stdout']
            assert 'Status: pending' in res['stdout']

            assert 'Action (approve/reject/cancel/update/validate/assign/unassign):' in res[
                'stdout']
            assert '{} certificate request'.format(gramer_dict[action].title()) in res['stdout']
            assert 'Request ID:' in res['stdout']
            assert 'Type:' in res['stdout']
            assert 'Request Status:' in res['stdout']
            if action in ['assign', 'unassign', 'update', 'validate']:
                assert 'Request Status: pending' in res['stdout']
            elif action in ['approve']:
                assert 'Request Status: complete' in res['stdout']
            else:
                assert 'Request Status: {}'.format(gramer_dict[action]) in res['stdout']
            assert 'Operation Result: ' in res['stdout']
            log.info("Successfully approved certificate request.")
        else:
            log.error("Failed to approve certificate request.")
            pytest.fail()


@pytest.mark.parametrize('action1', ['cancel', 'reject', 'approve'])
@pytest.mark.parametrize('action2', ['approve', 'reject', 'cancel', 'update', 'validate', 'assign',
                                     'unassign'])
def test_pki_cert_request_review_with_differnt_actions(ansible_module, action1, action2):
    """
    :Title: Review certificate request with each action and retry all the options on the same req.
    :Description: Review certificate request with each action and retry all the options on same req.
    :Requirement:
    :CaseComponent: \-
    :Setup: Use the subsystems setup in ansible to run subsystem commands
    :Steps:
        1. Submit certificate request.
        2. Cancel certificate request and re run it with approve, reject, cancel, update,
        validate, assign, unassign.
        3. Reject certificate request and re run it with approve, reject, cancel, update,
        validate, assign, unassign.
        4. Approve certificate request and re run it with approve, reject, cancel, update,
        validate, assign, unassign.
    :Expectedresults:
        1. After the first action for all the actions it should throw an error.
    """
    no = random.randint(111, 9999)
    user = 'testuser{}'.format(no)
    fullName = 'Test User {}'.format(no)
    subject = 'UID={},CN={}'.format(user, fullName)
    request_id = user_op.create_certificate_request(ansible_module, subject=subject)
    cert_id = user_op.process_certificate_request(ansible_module, request_id=request_id,
                                                  action=action1)
    req_xml = '/tmp/req_{}.xml'.format(request_id)
    req_update = 'pki -d {} -c {} -n "{}" -p {} -P http {} {} ' \
                 '--file {}'.format(constants.NSSDB, constants.CLIENT_DATABASE_PASSWORD,
                                    constants.CA_ADMIN_NICK, constants.CA_HTTP_PORT, cmd,
                                    request_id, req_xml)
    log.info("Running: {}".format(req_update))
    update_prof = ansible_module.expect(
        command=req_update,
        responses={"Action \(approve/reject/cancel/update/validate/assign/unassign\): ": action2})

    for result in update_prof.values():
        if result['rc'] == 0:
            assert 'Retrieved certificate request {}'.format(request_id) in result['stdout']
            assert 'Request ID: {}'.format(request_id) in result['stdout']
            assert 'Type: enrollment' in result['stdout']
            assert 'Status: pending' in result['stdout']

            assert 'Action (approve/reject/cancel/update/validate/assign/unassign):' in result[
                'stdout']
            assert 'Updated certificate request {}'.format(request_id) in result['stdout']
            assert 'Operation Result: success' in result['stdout']
            log.error("Failed to retrieve the certificate request in file.")
            pytest.fail()
        else:
            log.info(result['stdout'])
            assert 'BadRequestException' in result['stdout']
            log.info("Successfully run ")


def test_pki_cert_request_review_adding_request_id_and_cert_id_in_audit_logs(ansible_module):
    """
    :Title: Bug 1452344 - Test Request serial no and Certificate serial no get added in
            to the CERT_REQUEST_PROCESSED audit event.
    :Description: The certificate serial number should be added into CERT_REQUEST_PROCESSED
            audit log as a separate field
    :Requirement: RHCS-REQ Certificate Authority Certificate Enrollment
    :CaseComponent: \-
    :Setup: Use the subsystem setup in ansible to run subsystem commands
    :Assert: Verify that request id and certificate id is get added in to the audit logs.
    """
    subject = "UID=tuser{}".format(random.randint(1111, 999999))
    request_id = user_op.create_certificate_request(ansible_module, subject=subject)
    log.info("Submitted certificate request: {}".format(request_id))
    certificate_id = user_op.process_certificate_request(ansible_module, request_id=request_id,
                                                         action='approve')
    log.info("Approved certificate request : {}".format(certificate_id))
    approve_log = "[AuditEvent=CERT_REQUEST_PROCESSED][SubjectID={}][Outcome=Success]" \
                  "[ReqID={}][CertSerialNum={}] certificate request " \
                  "processed".format(constants.CA_ADMIN_USERNAME, request_id, str(int(certificate_id, 16)))
    logs = get_log_messages(ansible_module)
    log.info("Checking log: {}".format(approve_log))
    assert approve_log in logs


@pytest.mark.rsa_pss
@pytest.mark.gating_tier1
def test_pki_cert_request_review_CERT_REQUEST_PROCESSED_event_with_actions(ansible_module):
    """
    :Title: Bug 1452250 - verify audit logs event for cancel and reject actions.
    :Description: After the cancel the certificate request or reject the certificate request
            in the audit logs outcome as failure and Infovalue as null should be displayed.
    :Requirement: RHCS-REQ Certificate Authority Certificate Enrollment
    :CaseComponent: \-
    :Setup: Use the subsystem setup in ansible to run subsystem commands
    :Expectedresults: Verify that audit logs are shown the outcome as filure and invovalue as
    null after
            the cancellation of the request.
    """
    audit_log = "[AuditEvent=CERT_REQUEST_PROCESSED][SubjectID={}][Outcome={}]" \
                "[ReqID={}][InfoName={}][InfoValue={}] certificate request processed"

    subject = "UID=tuser{}".format(random.randint(111, 99999))
    request_id = user_op.create_certificate_request(ansible_module,
                                                    subject=subject,
                                                    request_type='pkcs10',
                                                    keysize='2048',
                                                    profile='caUserCert')
    log.info("Submitted certificate request: {}".format(request_id))
    user_op.process_certificate_request(ansible_module,
                                        request_id=request_id,
                                        action='reject')
    log.info("Rejected certificate request.")
    reject_log = audit_log.format(constants.CA_ADMIN_USERNAME, 'Failure', request_id,
                                  'rejectReason', '<null>')
    try:
        logs = get_log_messages(ansible_module)
        log.info("Checking log : {}".format(reject_log))
        assert reject_log in logs

    except Exception as e:
        print(e)
        pytest.fail("Failed to run audit log checking when certificate is canceled. ")

    request_id = user_op.create_certificate_request(ansible_module,
                                                    subject=subject,
                                                    request_type='pkcs10',
                                                    keysize='2048',
                                                    profile='caUserCert')
    log.info("Submitted certificate request: {}".format(request_id))
    user_op.process_certificate_request(ansible_module,
                                        request_id=request_id,
                                        action='cancel')
    log.info("Cancelled certificate request.")
    cancel_log = audit_log.format(constants.CA_ADMIN_USERNAME, 'Failure', request_id,
                                  'cancelReason', '<null>')
    log.info("Checking log : {}".format(cancel_log))
    try:
        logs = get_log_messages(ansible_module)
        assert cancel_log in logs

    except Exception as e:
        print(e)
        pytest.fail("Failed to run audit log checking when certificate is canceled. ")


@pytest.mark.parametrize('action', ['approve', 'reject', 'cancel'])
def test_pki_ca_cert_request_review_with_i18n_character(ansible_module, action):
    """
    :id: 293129b9-c8a7-475c-b450-cdb555194345
    :parametrized: yes
    :Title: Test create and process certificate req with i18n character and
            approve, reject and cancel action.
    :Description: Test create and process certificate req with i18n character and
                  approve, reject and cancel action.
    :Requirement: RHCS-REQ Certificate Authority Certificate Enrollment
    :CaseComponent: \-
    :Setup: Use the subsystems setup in ansible to run subsystem commands
    :Steps:
        1. Create certificate request using 'client-cert-request' with i18n character
        2. Get the request id
        3. Approve the certificate request.
        4. 1, 2, Reject the certificate request.
        5. 1, 2, Cancel the certificate request.
    :Expectedresults:
        1. It should get approved and certificate id is is displayed
        2. It should get rejected.
        3. Certificate request should get cancelled.
    : Automated: Yes
    """
    userid = 'ÖrjanÄke{}'.format(random.randint(1111, 9999999))
    subject = 'UID={},CN={}'.format(userid, userid)
    cert_req = ansible_module.pki(cli='client-cert-request',
                                      nssdb=constants.NSSDB,
                                      dbpassword=constants.CLIENT_DIR_PASSWORD,
                                      port=constants.CA_HTTPS_PORT,
                                      protocol='https',
                                      certnick='"{}"'.format(constants.CA_ADMIN_NICK),
                                      extra_args='"{}"'.format(subject))
    for result in cert_req.values():
        if result['rc'] == 0:
            request_id_raw = re.findall('Request ID: [\w].*', result['stdout'])
            request_id = request_id_raw[0].split(":")[1].strip()
            assert 'Request ID: {}'.format(request_id) in result['stdout']
            assert 'Type: enrollment' in result['stdout']
            assert 'Request Status: pending' in result['stdout']
            assert 'Operation Result: success' in result['stdout']
            log.info("Successfully run '{}'".format(cert_req))
        else:
            log.error("Failed to run '{}'".format(cert_req))
            pytest.fail("Failed to run '{}'".format(cert_req))
    log.info("Generated certificate with Cert ID: {}".format(request_id))
    review_req = ansible_module.pki(cli=cmd,
                                    nssdb=constants.NSSDB,
                                    dbpassword=constants.CLIENT_DATABASE_PASSWORD,
                                    certnick="'{}'".format(constants.CA_ADMIN_NICK),
                                    port=constants.CA_HTTPS_PORT,
                                    protocol='https',
                                    extra_args='{} --action {}'.format(request_id, action))

    for result in review_req.values():
        log.info("Running : {}".format(result['cmd']))
        if result['rc'] == 0:
            assert 'Request ID: {}'.format(request_id) in result['stdout']
            assert 'Type:' in result['stdout']
            assert 'Request Status:' in result['stdout']
            assert 'Operation Result: ' in result['stdout']
        else:
            log.error("Failed to run {}".format(result['cmd']))
            pytest.fail()

